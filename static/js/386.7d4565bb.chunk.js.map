{"version":3,"file":"static/js/386.7d4565bb.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","webpack://react-homework-template/./src/components/App.module.css?6c4d","pages/Phonebook.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"formButton\":\"ContactForm_formButton__TN6Jq\"};","export const selectContacts = state => {\n    return state.contacts.items;\n  };\n  \n  export const selectFilter = state => {\n    return state.filter;\n  };\n\n  export const selectError = state => {\n    return state.contacts.error;\n  }\n\n  export const selectIsLoading = state => {\n    return state.contacts.isLoading;\n  }","import { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\nimport { addContact } from 'redux/operations';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const listOfContacts = useSelector(selectContacts);\n\n  const handleChangeName = event => {\n    const value = event.target.value;\n    setName(value);\n  };\n\n  const handleChangeNumber = event => {\n    const value = event.target.value;\n    setNumber(value);\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    // const form = event.currentTarget;\n    const contactsLists = [...listOfContacts];\n    if (contactsLists.findIndex(contact => name === contact.name) !== -1) {\n      alert(`${name} is already in contacts.`);\n    } else {\n      dispatch(addContact({ name: name, phone: number }));\n    }\n    setName('');\n    setNumber('');\n  };\n\n  const loginNameId = nanoid();\n  const loginNumberId = nanoid();\n\n  return (\n    <div>\n      <form className={css.form} onSubmit={handleFormSubmit}>\n        <label className={css.label} htmlFor={loginNameId}>\n          Name\n        </label>\n        <input\n          id={loginNameId}\n          onChange={handleChangeName}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <label className={css.label} htmlFor={loginNumberId}>\n          {' '}\n          Number{' '}\n        </label>\n        <input\n          id={loginNumberId}\n          onChange={handleChangeNumber}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <button className={css.formButton}>Add contact</button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"filterLabel\":\"Filter_filterLabel__+pnW-\"};","import css from './Filter.module.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/selectors';\nimport { setFilter } from '../../redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleChange = event => {\n    const { value } = event.currentTarget;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <div>\n      <label className={css.filterLabel}>Find contacts by Name </label>\n      <input\n        className={css.filterName}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter filter\"\n        value={filter}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ContactList_button__7kL4l\"};","import { useDispatch, useSelector } from 'react-redux';\n\nimport { selectContacts, selectFilter } from 'redux/selectors';\n\nimport css from './ContactList.module.css';\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n  );\n\n  const dispatch = useDispatch();\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <ul className={css.list}>\n      {filteredContacts.map(contact => (\n        <li className={css.listItem} key={contact.id}>\n          {' '}\n          {contact.name} {contact.phone}\n          <button\n            className={css.button}\n            type=\"button\"\n            onClick={() => handleDelete(contact.id)}\n          >\n            {' '}\n            Delete{' '}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"Loader\":\"Loader_Loader__wqo9C\"};","import { Bars } from 'react-loader-spinner';\nimport css from './Loader.module.css'\n\n\nexport const Loader = () => {\n  return (\n    <div className={css.Loader}>\n   <Bars\n      height=\"300\"\n      width=\"300\"\n      color=\"#000000\"\n      ariaLabel=\"bars-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"\"\n      visible={true}\n    />\n    </div>\n  );\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"app\":\"App_app__kyRP7\"};","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Loader } from '../components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { selectIsLoading, selectError } from '../redux/selectors';\nimport { useDispatch } from 'react-redux';\n\nimport { useSelector } from 'react-redux';\nimport { fetchContacts } from '../redux/operations';\nimport css from '../components/App.module.css';\n\nconst Phonebook = () => {\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n  \n    const dispatch = useDispatch();\n  \n    useEffect(() => {\n      dispatch(fetchContacts());\n    }, [dispatch]);\n  \n    return (\n        <div className={css.app}\n        style={{\n          height: '100vh',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          fontSize: 20,\n          color: '#010101',\n        }}>\n         <h1>Phonebook</h1>\n        <ContactForm />\n  \n        <h2> Contacts </h2>\n        <Filter />\n        {isLoading && !error && <Loader />}\n        <ContactList />\n        \n        \n        </div>\n        \n        )\n}\n\nexport default Phonebook;"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectError","error","selectIsLoading","isLoading","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","listOfContacts","useSelector","loginNameId","nanoid","loginNumberId","className","css","onSubmit","event","preventDefault","findIndex","contact","alert","addContact","phone","htmlFor","id","onChange","value","target","type","pattern","title","required","Filter","placeholder","currentTarget","setFilter","ContactList","filteredContacts","toLowerCase","includes","trim","map","onClick","deleteContact","Loader","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","useEffect","fetchContacts","style","display","flexDirection","justifyContent","alignItems","fontSize"],"sourceRoot":""}