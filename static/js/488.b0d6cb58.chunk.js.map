{"version":3,"file":"static/js/488.b0d6cb58.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Contacts.module.css?8552","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => {\n    return state.contacts.items;\n  };\n  \n  export const selectFilter = state => {\n    return state.filter;\n  };\n\n  export const selectError = state => {\n    return state.contacts.error;\n  }\n\n  export const selectIsLoading = state => {\n    return state.contacts.isLoading;\n  }","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ContactList_button__7kL4l\"};","import { useDispatch, useSelector } from 'react-redux';\n\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nimport css from './ContactList.module.css';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n  );\n\n  const dispatch = useDispatch();\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <ul className={css.list}>\n      {filteredContacts.map(contact => (\n        <li className={css.listItem} key={contact.id}>\n          {' '}\n          {contact.name} {contact.phone}\n          <button\n            className={css.button}\n            type=\"button\"\n            onClick={() => handleDelete(contact.id)}\n          >\n            {' '}\n            Delete{' '}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"formButton\":\"ContactForm_formButton__TN6Jq\"};","import { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\nimport { addContact } from 'redux/contacts/operations';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const listOfContacts = useSelector(selectContacts);\n\n  const handleChangeName = event => {\n    const value = event.target.value;\n    setName(value);\n  };\n\n  const handleChangeNumber = event => {\n    const value = event.target.value;\n    setNumber(value);\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n  \n    const contactsLists = [...listOfContacts];\n    if (contactsLists.findIndex(contact => name === contact.name) !== -1) {\n      alert(`${name} is already in contacts.`);\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n    setName('');\n    setNumber('');\n  };\n\n  const loginNameId = nanoid();\n  const loginNumberId = nanoid();\n\n  return (\n    <div>\n\n      <form className={css.form} onSubmit={handleFormSubmit}>\n        <h1>Your contacts</h1>\n        <label className={css.label} htmlFor={loginNameId}>\n          Name\n        </label>\n        <input\n          id={loginNameId}\n          onChange={handleChangeName}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <label className={css.label} htmlFor={loginNumberId}>\n          {' '}\n          Number{' '}\n        </label>\n        <input\n          id={loginNumberId}\n          onChange={handleChangeNumber}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <button className={css.formButton}>Add contact</button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"filterLabel\":\"Filter_filterLabel__+pnW-\",\"wrapper\":\"Filter_wrapper__9Ksqy\"};","import css from './Filter.module.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/contacts/selectors';\nimport { setFilter } from '../../redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleChange = event => {\n    const { value } = event.currentTarget;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <div className={css.filter}>\n      <label className={css.filterLabel}>Find contacts by Name </label>\n      <input\n        className={css.filterName}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter filter\"\n        value={filter}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"app\":\"Contacts_app__GwuGg\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n// import { TaskEditor } from 'components/TaskEditor/TaskEditor';\n// import { fetchContacts } from 'redux/tasks/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {Filter} from '../components/Filter/Filter';\nimport css from './Contacts.module.css'\nimport { Loader } from 'components/Loader/Loader';\n// import { ContactForm } from 'components/ContactForm/ContactForm';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.app}>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm/>\n      <div>{isLoading && <Loader/>}</div>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","ContactList","useSelector","filteredContacts","contact","name","toLowerCase","includes","trim","dispatch","useDispatch","className","css","map","phone","type","onClick","id","deleteContact","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","setName","number","setNumber","listOfContacts","loginNameId","loginNumberId","onSubmit","event","preventDefault","findIndex","alert","addContact","htmlFor","onChange","value","target","pattern","title","required","Filter","placeholder","currentTarget","setFilter","Contacts","useEffect","fetchContacts","Helmet","Loader"],"sourceRoot":""}